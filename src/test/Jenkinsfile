def readVarsFromYaml(String readYamlFilePath){
    """
    Función para leer variables llave valor(String) desde un archivo yaml
    """
    if(fileExists(readYamlFilePath)){
        def yamlFile = readYaml file: "$readYamlFilePath"
        yamlFile.each { key, value ->
            env."$key" = value
            echo "Se crea variable $key = $value"
        }
    } else {
        error "No se encontró archivo $readYamlFilePath en el workspace!"
    }
}

pipeline {

    agent any

    environment {
        // BRANCHES = "^stage_(dev|qas|pro)_env_(dev|qas|pro)$"
        BRANCHES = "main"
    }
 
    stages {
        stage ("Initialize Pipeline") {
            when { branch pattern: BRANCHES, comparator: "REGEXP"; beforeAgent true }
            // agent { kubernetes { inheritFrom 'gcloud'; showRawYaml false } }
            

            steps {
               script { 
                    readVarsFromYaml("src/test/environments/variables.yaml") 
                    env.bucket = sh(script: "eval echo \$$BRANCH_NAME", returnStdout: true).trim()
                    echo "Se encuentra bucket: $bucket"

                    def folderMapping = [
                        'folder1': 'gs://$bucket/folder1',
                        'folder2': 'gs://$bucket/folder2',
                        'folder3': 'gs://$bucket/folder3'
                    ]

                    folderMapping.each { localFolder, gcsPath ->
                        echo "Syncing $localFolder to $gcsPath"
                        // sh "gcloud storage rsync $localFolder $gcsPath --exclude='jenkins'"
                    }
                }
                
            }
        }
    }
}  